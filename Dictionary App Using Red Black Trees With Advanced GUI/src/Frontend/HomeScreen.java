/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Frontend;
import Backend.RedBlackTree;
import com.formdev.flatlaf.FlatDarkLaf;
import java.awt.Color;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.UIManager;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Scanner;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import javax.sound.sampled.Clip;
import javax.sound.sampled.LineUnavailableException;
import javax.sound.sampled.UnsupportedAudioFileException;
import javax.swing.UIManager;

/**
 *
 * @author Saad
 */
public class HomeScreen extends javax.swing.JFrame implements MouseListener,Subject{

    private Menu menu;
    private RedBlackTree tree;
    /**
     * Creates new form HomeScreen
     */
    public HomeScreen() {
        initComponents();
        this.getStarted.addMouseListener(this);
        this.menu = null;
        this.tree = null;
        this.playMusic();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        getStarted = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Home Screen");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        getStarted.setBackground(new java.awt.Color(51, 51, 51));
        getStarted.setFont(new java.awt.Font("Showcard Gothic", 3, 36)); // NOI18N
        getStarted.setForeground(new java.awt.Color(255, 255, 255));
        getStarted.setText("Get Started!");
        getStarted.setToolTipText("");
        getStarted.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        getStarted.setOpaque(true);
        getStarted.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getStartedActionPerformed(evt);
            }
        });
        getContentPane().add(getStarted, new org.netbeans.lib.awtextra.AbsoluteConstraints(680, 500, 310, 90));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Frontend/home.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1080, 640));

        setSize(new java.awt.Dimension(1094, 647));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void getStartedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getStartedActionPerformed
        // TODO add your handling code here:
        this.tree = new RedBlackTree();
        readFromFile(tree);
        if(menu == null)
        {
            menu = new Menu(tree);
        }
        menu.setSubject(this);
        this.notifyObserver(menu);
    }//GEN-LAST:event_getStartedActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            UIManager.setLookAndFeel(new FlatDarkLaf());
        }
        catch (Exception e) {
            e.printStackTrace();
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeScreen().setVisible(true);
            }
        });
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton getStarted;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void mouseClicked(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mousePressed(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        //throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        getStarted.setBackground(Color.WHITE);
        getStarted.setForeground(new Color(51,51,51));
    }

    @Override
    public void mouseExited(MouseEvent e) {
        getStarted.setBackground(new Color(51,51,51));
        getStarted.setForeground(Color.WHITE);
    }

    @Override
    public void notifyObserver(Observer observer) {
        observer.update(); 
    }
    
    public void readFromFile(RedBlackTree redBlackTree)
    {
        try {
            File file = new File("dict.txt");
            try (Scanner sc = new Scanner(file))
            {
                String str;
                while (sc.hasNextLine())
                {
                    str = sc.nextLine();
                    redBlackTree.insert(str);
                }
            }   
        }
        catch(FileNotFoundException e) {
            System.out.print("ERROR OCCURED WHILE OPENING THE FILE!");
        }
    }
    private void playMusic() {
	Clip clip;
	try {
            clip = AudioSystem.getClip();
            AudioInputStream ais = AudioSystem.getAudioInputStream(new File("src/res/music.wav").toURL());
            clip.open(ais);
            clip.loop(Clip.LOOP_CONTINUOUSLY);
	} catch (LineUnavailableException | UnsupportedAudioFileException | IOException e) {
            System.out.println("Cant play music");
		}
	}
}
